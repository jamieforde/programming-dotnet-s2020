using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DivideByZeroExceptionHandling
{
    // Exception - indicates a problem occurred during a programs execution.  
    // Excecption handling - fault tolerant apps, allows app to continue functioning as if no problem occurred

    // Exception Assistant 
    //  * Line pointing from the EA to the line of code that casued the exception (throw point) 
    //  * The type of exception
    //  * Troubleshooting tips 
    //  * Links to view or copy the complete exception details

    // Termination Model of Exception Handling
    // *  Note that the try block terminates immediately when an exception is thrown
    // *  Control does not return to the throw point

    // Flow of Control
    // *  Once an exception occurs the CLR attempts locate a matching catch block

    // .NET Exception Hiereachy
    // Only objects of the class Exception and its derived classes can be thrown and caught.  
    // System Exception
    // * Generated by the CLR
    // 





    class Program
    {
        static void Main(string[] args)
        {
            bool continueLoop = true;

            do
            {
                // Code that could throw exceptions are wrapped in a try block
                // Parse method could throw an a number of exceptions
                try
                {
                    Console.Write("Enter an integer numerator: ");
                    var numerator = int.Parse(Console.ReadLine());
                    Console.Write("Enter an integer denominator: ");
                    var denominator = int.Parse(Console.ReadLine());
                    var result = numerator / denominator;
                    Console.WriteLine($"Result: {numerator} / {denominator} = {result}");
                    continueLoop = false;

                    // Thrown when the format of a parameter is not valid
                    // In our Parse method above: if the user enters a non-integer number then line 45 or line 47 
                    // will generate a Format Exception. We handle the exception here in catch block.
                    // Note: The properties of FormatException.   
                }
                catch (FormatException formatException)
                {
                    Console.WriteLine($"{formatException.Message}");
                    Console.WriteLine($"You must enter integers.  Please try again.\n");

                    // Thrown when dividing by zero in integer arthimetic
                    // Line 49 will through a DivideByZero exception if the denominator has been set to 0
                }
                catch (DivideByZeroException divideByZeroException)
                {
                    Console.WriteLine($"{divideByZeroException.Message}");
                    Console.WriteLine("Denominator cannot be zero");
                }
                // This catch block does not specify a sub-class of the Exception class
                // This is known as a gerneal catch clause 
                catch (Exception exception)
                {
                    Console.WriteLine($"{exception.Message}");
                }

            } while (continueLoop);

            Console.ReadKey();
        }
    }
}
